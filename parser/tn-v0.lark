start: statement*

?statement: var_decl
          | if_stmt
          | while_stmt
          | function_decl
          | interface_decl
          | return_stmt
          | expr_stmt
          | block

var_decl: "let" CNAME ":" type "=" expression ";"

if_stmt: "if" "(" expression ")" statement ("else" statement)?
while_stmt: "while" "(" expression ")" statement

block: "{" statement* "}"

function_decl: "function" CNAME "(" [parameters] ")" ":" type block
interface_decl: "interface" CNAME [extends_clause] "{" (interface_member)* "}"

return_stmt: "return" expression ";"

expr_stmt: expression ";"


array_specifier: "[" "]"
type: CNAME array_specifier*

parameters: param ("," param)*
param: CNAME ":" type

extends_clause: "extends" CNAME
interface_member: CNAME ":" type ";"


?expression: assignment

?assignment: lvalue "=" expression -> assign
           | logical_or

?logical_or: logical_or "||" logical_and -> or_op
            | logical_and

?logical_and: logical_and "&&" bitwise_or -> and_op
            | bitwise_or

?bitwise_or: bitwise_or "|" bitwise_xor -> bitwise_or_op
           | bitwise_xor

?bitwise_xor: bitwise_xor "^" bitwise_and -> bitwise_xor_op
            | bitwise_and

?bitwise_and: bitwise_and "&" equality -> bitwise_and_op
            | equality

?equality: equality "==" relational -> eq
         | equality "!=" relational -> neq
         | equality "===" relational -> strict_eq
         | equality "!==" relational -> strict_neq
         | relational

?relational: relational "<" shift -> lt
           | relational ">" shift -> gt
           | relational "<=" shift -> lte
           | relational ">=" shift -> gte
           | shift

?shift: shift "<<" add -> lshift
      | shift ">>" add -> rshift
      | add

?add: add "+" mul -> add
    | add "-" mul -> sub
    | mul

?mul: mul "*" power -> mul
    | mul "/" power -> div
    | mul "%" power -> mod
    | power

?power: unary "**" power -> pow
      | unary

?unary: "!" unary     -> not_op
      | "~" unary     -> bitwise_not_op
      | "++" lvalue   -> pre_inc
      | "--" lvalue   -> pre_dec
      | "+" unary     -> pos
      | "-" unary     -> neg
      | cast

?cast: postfix "as" type -> type_cast
     | postfix

?postfix: postfix "++" -> post_inc
        | postfix "--" -> post_dec
        | postfix "[" expression "]" -> array_access
        | postfix "." CNAME -> field_access
        | postfix "(" [arguments] ")" -> function_call
        | atom

?lvalue: CNAME -> var
       | postfix "[" expression "]" -> array_access
       | postfix "." CNAME -> field_access

?atom: NUMBER
     | STRING
     | "true" -> true_lit
     | "false" -> false_lit
     | "null" -> null_lit
     | CNAME -> var
     | array_literal
     | object_literal
     | "(" expression ")"

arguments: expression ("," expression)*

array_literal: "[" [arguments] "]"

object_literal: "{" [key_value_pairs] "}"
key_value_pairs: key_value ("," key_value)*
key_value: CNAME ":" expression


%import common.CNAME
%import common.SIGNED_NUMBER -> NUMBER
%import common.ESCAPED_STRING -> STRING
%import common.WS

%ignore WS